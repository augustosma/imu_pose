#include <imu_pose/imu_pose.h>

namespace imu_pose
{	
	//IMUPose::IMUPose(const Eigen::Vector3d &init_position,const Eigen::Vector3d &init_orientation)
	IMUPose::IMUPose()
	{
		//position_ = init_position;
		//orientation_ = init_orientation;
		this->calibrate();
		g_ << 0,0,9.8;

		Eigen::Matrix<double,3,1> my_state
		       my_state	<< 0,0,0;//,0,0,0,0,0,0;
	}
	
	IMUPose::~IMUPose(void)
	{
	}

	void IMUPose::calibrate()//const Eigen::Vector3d &angles)
	{
//		phi = 0.0;//euler angle, rotation around x
//		theta = 0.0;// around y
 //		psi = 0.0;//around z
	}
	
	void IMUPose::update(const Eigen::Matrix<double,6,1> &imu, const Eigen::Matrix<double,9,1> &last_state, Eigen::Matrix<double,9,1> &new_state,const double &dt)
	{
		
		double phi = my_state[0];//last_state[6];
		double theta = my_state[1];//last_state[7];
		double psi = my_state[2];//last_state[8];
//		std::cout << phi << std::endl;
//		std::cout << theta << std::endl;
//		std::cout << psi << std::endl;


		Eigen::Vector3d w_imu,acc_imu;
		w_imu << imu[3],imu[4],imu[5];
		acc_imu << imu[0],imu[1],imu[2];

		//TODO: remove bias
		
		Eigen::Matrix<double,3,3> attit_transf_mat;
		attit_transf_mat << 1, cos(phi)*tan(theta), sin(phi)*tan(theta),
				0, cos(phi), -sin(phi),
				0, sin(phi)/cos(theta), cos(phi)/cos(theta); 
		//ANGULAR POSITION
		//new_state.tail<3>() = last_state.tail<3>() + attit_transf_mat * w_imu * dt;
		my_state = my_state + attit_transf_mat * w_imu * dt;

		std::cout << my_state << std::endl;	
		
		Eigen::Matrix<double,3,3> transf_mat;
		transf_mat << cos(theta)*cos(psi), -cos(phi)*sin(psi)+sin(phi)*sin(theta)*cos(psi), sin(phi)*sin(psi)+cos(phi)*sin(theta)*cos(psi),
					cos(theta)*sin(psi), cos(phi)*cos(psi)+sin(phi)*sin(theta)*sin(psi), -sin(phi)*cos(psi)+cos(phi)*sin(theta)*cos(psi),
					-sin(theta), sin(phi)*cos(theta), cos(phi)*cos(theta);
		//LINEAR POSITION
		Eigen::Matrix<double,3,1> accel = transf_mat * acc_imu - g_;	
		Eigen::Matrix<double,6,1> ac;
		ac << 0.0,0.0,0.0,accel[0],accel[1],accel[2];
		
		Eigen::Matrix<double,6,6> A = Eigen::MatrixXd::Identity(6,6);
		A.topRightCorner(3,3) = Eigen::MatrixXd::Identity(3,3) * dt;
	//	std::cout << A << std::endl;		
		new_state.head<6>() = A * last_state.head<6>() + dt * ac;
	//	std::cout << new_state << std::endl;		
	}
	
}
